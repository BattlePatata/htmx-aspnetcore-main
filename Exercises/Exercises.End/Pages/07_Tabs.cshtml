@page "/examples/07-tabs"
@model Exercises.Pages.Tabs
@{
    ViewBag.Title = "Tabs";
    ViewBag.Next = "08_Shortcuts";
    ViewBag.Previous = "06_Modal";
}
<markdown>
    # 7. Tabs

    Tabs are commonplace in most user interfaces, and you can indeed implement the pattern without HTMX. However, there are circumstances where it makes sense to implement them with HTMX, especially when each tab can have a substantial amount of information that is not always accessed by your users.

    In this sample, you'll use HTMX to render only the tab the user has selected. The server performs all the logic of determining which tab is active. This technique is compelling if tab information changes when the user switches away.
    
    You're likely noticing the patterns emerging with the use of `hx` attributes and Razor partials. HTMX delivers on the promise of few lines of code with significant impacts.
</markdown>

<div class="card p-4">
    @await Html.PartialAsync("_Tabs")
</div>

@section head
{
    <style>
    .easeload{
        opacity: 0;
        transition: all 1s ease;
    }
    </style>
}